name: 'Semantic Release'
description: 'Run semantic-release with minimal configuration - supports full releases on main and prereleases on other branches'
branding:
  icon: 'tag'
  color: 'green'

inputs:
  github-token:
    description: 'GitHub token for authentication'
    required: true
    default: ${{ github.token }}
  dry-run:
    description: 'Run in dry-run mode (no actual release)'
    required: false
    default: 'false'
  working-directory:
    description: 'Working directory to run semantic-release from'
    required: false
    default: '.'

outputs:
  new-release-version:
    description: 'The new release version number (without v prefix)'
    value: ${{ steps.semantic-release.outputs.new-release-version }}
  new-release-git-tag:
    description: 'The new release git tag (with v prefix)'
    value: ${{ steps.semantic-release.outputs.new-release-git-tag }}
  new-release-published:
    description: 'Whether a new release was published'
    value: ${{ steps.semantic-release.outputs.new-release-published }}

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install semantic-release
      shell: bash
      run: |
        npm install -g semantic-release@23 \
          @semantic-release/changelog@6 \
          @semantic-release/git@10 \
          @semantic-release/github@10 \
          @semantic-release/commit-analyzer@12 \
          @semantic-release/release-notes-generator@13 \
          conventional-changelog-conventionalcommits@7
          
    - name: Determine release branch configuration
      shell: bash
      id: branch-config
      run: |
        BRANCH_NAME="${{ github.ref_name }}"
        echo "Current branch: $BRANCH_NAME"
        
        if [ "$BRANCH_NAME" = "main" ]; then
          echo "prerelease=false" >> $GITHUB_OUTPUT
          echo "branch_config=main" >> $GITHUB_OUTPUT
        else
          echo "prerelease=true" >> $GITHUB_OUTPUT
          echo "branch_config=$BRANCH_NAME" >> $GITHUB_OUTPUT
        fi
        
    - name: Create semantic-release configuration
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        cat > .releaserc.json << 'EOF'
        {
          "branches": [
            "main",
            {
              "name": "*",
              "prerelease": true
            }
          ],
          "plugins": [
            [
              "@semantic-release/commit-analyzer",
              {
                "preset": "conventionalcommits"
              }
            ],
            [
              "@semantic-release/release-notes-generator",
              {
                "preset": "conventionalcommits"
              }
            ],
            [
              "@semantic-release/changelog",
              {
                "changelogFile": "CHANGELOG.md"
              }
            ],
            [
              "@semantic-release/github",
              {
                "assets": []
              }
            ]
          ],
          "repositoryUrl": "${{ github.server_url }}/${{ github.repository }}",
          "tagFormat": "v${version}"
        }
        EOF
        
    - name: Run semantic-release
      shell: bash
      id: semantic-release
      working-directory: ${{ inputs.working-directory }}
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        GIT_AUTHOR_NAME: github-actions[bot]
        GIT_AUTHOR_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
        GIT_COMMITTER_NAME: github-actions[bot]
        GIT_COMMITTER_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
      run: |
        set -e
        
        # Initialize output variables
        echo "new-release-published=false" >> $GITHUB_OUTPUT
        echo "new-release-version=" >> $GITHUB_OUTPUT
        echo "new-release-git-tag=" >> $GITHUB_OUTPUT
        
        # Prepare semantic-release command
        if [ "${{ inputs.dry-run }}" = "true" ]; then
          echo "Running semantic-release in dry-run mode..."
          SR_COMMAND="semantic-release --dry-run"
        else
          echo "Running semantic-release..."
          SR_COMMAND="semantic-release"
        fi
        
        # Run semantic-release and capture output
        OUTPUT=$(eval $SR_COMMAND 2>&1) || true
        echo "$OUTPUT"
        
        # Parse the output for release information
        if echo "$OUTPUT" | grep -q "Published release"; then
          echo "new-release-published=true" >> $GITHUB_OUTPUT
          
          # Extract version from output
          VERSION=$(echo "$OUTPUT" | grep -oP "Published release \K[0-9]+\.[0-9]+\.[0-9]+(?:-[a-zA-Z0-9\.-]+)?" | head -1)
          if [ -n "$VERSION" ]; then
            echo "new-release-version=$VERSION" >> $GITHUB_OUTPUT
            echo "new-release-git-tag=v$VERSION" >> $GITHUB_OUTPUT
            echo "NEW_RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
            echo "NEW_RELEASE_GIT_TAG=v$VERSION" >> $GITHUB_ENV
          fi
        elif echo "$OUTPUT" | grep -q "There are no relevant changes"; then
          echo "No release needed - no relevant changes found"
        elif [ "${{ inputs.dry-run }}" = "true" ] && echo "$OUTPUT" | grep -q "Release note for version"; then
          # In dry-run mode, extract the would-be version
          VERSION=$(echo "$OUTPUT" | grep -oP "Release note for version \K[0-9]+\.[0-9]+\.[0-9]+(?:-[a-zA-Z0-9\.-]+)?" | head -1)
          if [ -n "$VERSION" ]; then
            echo "Would publish version: $VERSION (dry-run mode)"
            echo "new-release-version=$VERSION" >> $GITHUB_OUTPUT
            echo "new-release-git-tag=v$VERSION" >> $GITHUB_OUTPUT
            echo "NEW_RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
            echo "NEW_RELEASE_GIT_TAG=v$VERSION" >> $GITHUB_ENV
          fi
        fi
        
    - name: Clean up configuration
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      if: always()
      run: |
        rm -f .releaserc.json